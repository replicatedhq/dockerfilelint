#!/usr/bin/env node

var process = require('process');
var fs = require('fs');
var argv = require('yargs').argv;
var dockerfilelint = require('../lib/index');
var CliReporter = require('../lib/cli_reporter');
var chalk = require('chalk');

var fileContent;
if (argv._.length === 0 || argv._[0] === '-') {
  // read content from stdin
  fileContent = '';

  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function (chunk) {
    fileContent += chunk;
  });
  return process.stdin.on('end', function () {
    if (fileContent.length === 0) {
      console.error('Usage: dockerfilelint <filename or dockerfile contents>');
      return process.exit(1);
    }
    processContent('<stdin>', fileContent);
  });
}

var ignored = [];
if (argv.ignore) {
  ignored = argv.ignore.split(',');
}

var fileName = argv._[0];
try {
  var stats = fs.lstatSync(fileName);
  if (stats.isFile()) {
    fileContent = fs.readFileSync(fileName, 'UTF-8');
  }
} catch (e) {
  if (e.code === 'ENOENT') {
    fileContent = fileName;
    fileName = '<contents>';
  }
}

if (!fileContent) {
  console.error(chalk.red('Invalid input'));
  return process.exit(1);
}

processContent(fileName, fileContent, ignored);

function processContent (name, content, ignored) {
  var result = dockerfilelint.run(content, ignored);
  var reporter = new CliReporter();
  reporter.addFile(name, content, result);
  var report = reporter.buildReport();
  console.log(report.toString());
  process.exit(report.totalIssues);
}
