#!/usr/bin/env node

var process = require('process');
var fs = require('fs');
var os = require("os");
var path = require('path');
var usage = 'Usage: dockerfilelint [files | content..] [options]';
var argv = require('yargs')
  .usage(usage)
  .option('o', {
    alias: 'output',
    desc: 'Specify the format to use for output of linting results. Valid values are `json` or `cli` (default).',
    type: 'string'
  })
  .option('j', {
    alias: 'json',
    desc: 'Output linting results as JSON, equivalent to `-o json`.',
    type: 'boolean'
  })
  .alias('v', 'version')
  .version(() => require('../package.json').version)
  .help().alias('h', 'help')
  .example('dockerfilelint Dockerfile', 'Lint a Dockerfile in the current working directory\n')
  .example('dockerfilelint test/example/* -j', 'Lint all files in the test/example directory and output results in JSON\n')
  .example(`dockerfilelint 'FROM latest'`, 'Lint the contents given as a string on the command line\n')
  .example('dockerfilelint < Dockerfile', 'Lint the contents of Dockerfile via stdin')
  .wrap(86)
  .check(argv => {
    if (!argv.output && argv.json) argv.output = 'json'
    return true
  })
  .argv;

var dockerfilelint = require('../lib/index');
var chalk = require('chalk');

var Reporter = argv.output === 'json' ? require('../lib/reporter/json_reporter') : require('../lib/reporter/cli_reporter');
var reporter = new Reporter();

var fileContent, configFilePath;
if (argv._.length === 0 || argv._[0] === '-') {
  // read content from stdin
  fileContent = '';
  configFilePath = '.';

  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function (chunk) {
    fileContent += chunk;
  });
  return process.stdin.on('end', function () {
    if (fileContent.length === 0) {
      console.error(usage);
      return process.exit(1);
    }
    processContent(configFilePath, '<stdin>', fileContent);
    report();
  });
}

argv._.forEach((fileName) => {
  try {
    var stats = fs.lstatSync(fileName);
    if (stats.isFile()) {
      fileContent = fs.readFileSync(fileName, 'UTF-8');
      var root = (os.platform == "win32") ? process.cwd().split(path.sep)[0] : "/";
      configFilePath = path.resolve(path.dirname(fileName));
    }
  } catch (e) {
    if (e.code === 'ENOENT') {
      fileContent = fileName;
      fileName = '<contents>';
      configFilePath = './';
    }
  }

  if (!fileContent) {
    console.error(chalk.red('Invalid input:'), fileName);
    return process.exit(1);
  }

  processContent(configFilePath, fileName, fileContent);
});

report();

function processContent (configFilePath, name, content) {
  reporter.addFile(name, content, dockerfilelint.run(configFilePath, content));
}

function report () {
  var report = reporter.buildReport();
  console.log(report.toString());
  process.exit(report.totalIssues);
}
